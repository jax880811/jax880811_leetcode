class Solution:
    def twoSum(self, nums: list[int], target: int) -> list[int]:
        """
        使用哈希表來查找兩數之和的索引
        :param nums: 整數數組
        :param target: 目標值
        :return: 兩個數的索引
        """
        # 建立一個哈希表（Python 使用字典）
        num_map = {}

        # 遍歷數組的每個元素
        for i, num in enumerate(nums):
            # 計算需要的數值，即目標數減去當前數
            complement = target - num

            # 如果哈希表內已有該數值，則返回該數值的索引與當前索引
            if complement in num_map:
                return [num_map[complement], i]

            # 如果哈希表內沒有該數值，則存入當前數字與索引
            num_map[num] = i

        # 根據題目要求，這段程式碼理論上不會執行
        return []


# 測試範例
if __name__ == "__main__":
    nums = [2, 7, 11, 15]
    target = 9

    # 創建 Solution 的實例
    solution = Solution()

    # 調用 twoSum 方法並輸出結果
    print(solution.twoSum(nums, target))  # 輸出應該是 [0, 1]

'''
LeetCode 1: 兩數之和

題目翻譯：
給定一個整數數組 nums 和一個目標值 target，請你在該數組中找出和為目標值的兩個整數，並返回它們的索引。

題目需求：
1. 找出數組中和為目標值的兩個整數。
2. 返回這兩個整數的索引。

解題思路與拆解：
1. 問題分析：
   - 需要找到兩個數，使得它們的和等於目標值。
   - 需要返回這兩個數的索引。

2. 解題方法選擇：
   - 使用哈希表來記錄已遍歷過的數字和索引。
   - 每次計算 `target - nums[i]` 是否已經出現在哈希表中。

3. 解題步驟：
   - 初始化一個空的哈希表。
   - 遍歷數組的每個元素。
   - 計算需要的數值，即目標數減去當前數。
   - 如果哈希表內已有該數值，則返回該數值的索引與當前索引。
   - 如果哈希表內沒有該數值，則存入當前數字與索引。

重點筆記：
1. **哈希表法**:
   - 使用字典來記錄已遍歷過的數字和索引。
   - 每次計算 `target - nums[i]` 是否已經出現在字典中。
   - 若出現，則返回兩個索引。

2. **時間複雜度**:
   - 只遍歷一次 `nums`，每次查找字典需要 **O(1)**。
   - **總時間複雜度為 O(N)**。

3. **空間複雜度**:
   - 需要一個字典來存儲 `N` 個數字，空間複雜度為 **O(N)**。

4. **適用場景**:
   - 適合大規模數據（如 `N > 10^5`）。
   - 一般來說，比暴力法快很多。

範例解析：
- 輸入：nums = [2, 7, 11, 15], target = 9
- 過程：
  - 遍歷到 2 時，計算 `9 - 2 = 7`，7 不在字典中，存入 `{2: 0}`。
  - 遍歷到 7 時，計算 `9 - 7 = 2`，2 在字典中，返回 `[0, 1]`。
- 輸出：[0, 1]

函式功能說明：
- `class Solution`：封裝解決方案的類。
- `twoSum(self, nums, target)`：使用哈希表來查找兩數之和的索引。
- `num_map`：哈希表，用於記錄已遍歷過的數字和索引。
- `enumerate(nums)`：遍歷數組的每個元素及其索引。
- `complement`：需要的數值，即目標數減去當前數。
- `num_map[num] = i`：存入當前數字與索引。
'''