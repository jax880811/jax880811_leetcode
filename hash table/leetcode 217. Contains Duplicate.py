class Solution:
    def containsDuplicate(self, nums):
        # 創建一個空的集合來記錄已經出現過的元素
        seen = set()
        
        # 遍歷數組
        for num in nums:
            # 如果當前元素已經存在於集合中，返回 True
            if num in seen:
                return True
            
            # 將當前元素加入集合
            seen.add(num)
            
        # 如果遍歷結束後沒有發現重複元素，返回 False
        return False

# 測試範例
nums = [1, 2, 3, 1]

# 創建 Solution 的實例
solution = Solution()

# 調用 containsDuplicate 方法並輸出結果
print(solution.containsDuplicate(nums))

'''
LeetCode 217: 存在重複元素

題目翻譯：
給定一個整數數組 nums，如果數組中存在任何值出現至少兩次，返回 true；如果數組中每個元素都不相同，則返回 false。

題目需求：
1. 檢查數組中是否有重複的元素
2. 有重複返回 true，無重複返回 false
3. 需要考慮時間和空間複雜度

解題思路與拆解：
1. 問題分析：
   - 核心問題是檢測重複元素，需要記錄已經遇到過的元素
   - 可以使用哈希表達到 O(1) 的查詢效率

2. 解題方法選擇：
   - 方法一：使用集合（本解法採用）- 時間 O(n)，空間 O(n)
   - 方法二：排序後檢查相鄰元素 - 時間 O(n log n)，空間 O(1)或O(log n)

3. 解題步驟：
   - 創建一個空集合用於存儲已見過的元素
   - 遍歷數組中的每個元素
   - 檢查當前元素是否已在集合中
   - 如果在，說明有重複，返回 true
   - 如果不在，將元素加入集合
   - 遍歷結束後若未發現重複，返回 false

重點筆記：
1. **集合(set)的使用**:
   - `set()`：創建一個空的集合。
   - `num in seen`：檢查集合中是否存在指定的元素，時間複雜度為 O(1)。
   - `seen.add(num)`：將元素加入集合，時間複雜度為 O(1)。

2. **時間複雜度**:
   - 遍歷數組一次，時間複雜度為 O(N)，其中 N 是數組的長度。
   - 集合的查找和插入操作的平均時間複雜度為 O(1)。

3. **空間複雜度**:
   - 使用了一個集合來存儲元素，空間複雜度為 O(N)。

4. **適用場景**:
   - 適合處理中等規模的數組，例如：檢查用戶名是否重複、統計數據中的重複項等。

範例解析：
- 輸入：nums = [1, 2, 3, 1]
- 過程：
  - 遍歷到 1 時，seen = {1}
  - 遍歷到 2 時，seen = {1, 2}
  - 遍歷到 3 時，seen = {1, 2, 3}
  - 遍歷到 1 時，發現 1 已經存在於集合中，返回 True。
- 輸出：True

函式功能說明：
- `class Solution`：定義一個解決方案類別，用於封裝問題的解決方法。
- `def containsDuplicate(self, nums)`：定義一個方法，用於檢查數組中是否存在重複元素。
- `set()`：創建一個無序不重複元素集，支持成員檢測、刪除重複元素等操作。
- `in` 運算符：檢查元素是否存在於集合中，利用雜湊表實現 O(1) 的查詢效率。
- `seen.add(num)`：向集合中添加元素，如果元素已存在則不進行任何操作。
- `print()`：將結果輸出到控制台。
'''