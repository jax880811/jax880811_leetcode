class Solution:
    def removeElement(self, nums: list[int], val: int) -> int:
        """
        移除數組中所有等於 val 的元素，並返回新數組的長度
        :param nums: 整數數組
        :param val: 要移除的值
        :return: 新數組的長度
        """
        k = 0  # 慢指針，用於指向新數組的最後一個元素

        # 遍歷數組
        for i in range(len(nums)):
            if nums[i] != val:  # 如果當前元素不等於 val
                nums[k] = nums[i]  # 將其複製到慢指針的位置
                k += 1  # 慢指針向前移動

        return k  # 返回新數組的長度

        

# 測試範例

nums = [3,2,2,3]
val = 3
solution = Solution()
print(solution.removeElement(nums, val))  # 輸出: True

'''
LeetCode 27: 移除元素

題目翻譯：
給你一個數組 nums 和一個值 val，你需要原地移除所有數值等於 val 的元素，並返回移除後數組的新長度。

題目需求：
1. 原地移除所有等於 val 的元素。
2. 返回新數組的長度。

解題思路與拆解：
1. 問題分析：
   - 需要移除數組中所有等於 val 的元素。
   - 需要返回新數組的長度。

2. 解題方法選擇：
   - 使用雙指針法來原地修改數組。
   - 快指針遍歷數組，慢指針指向新數組的最後一個元素。

3. 解題步驟：
   - 初始化慢指針 k 為 0。
   - 使用快指針 i 遍歷數組。
   - 如果當前元素不等於 val，將其複製到慢指針的位置，並移動慢指針。
   - 返回慢指針的位置，即新數組的長度。

重點筆記：
1. **雙指針法**:
   - 使用快指針遍歷數組，慢指針指向新數組的最後一個元素。
   - 原地修改數組，避免使用額外空間。

2. **時間複雜度**:
   - O(n)，其中 n 是數組的長度。
   - 只需要遍歷數組一次。

3. **空間複雜度**:
   - O(1)，只使用了常數級別的額外空間。

4. **適用場景**:
   - 適合需要原地修改數組的問題。
   - 例如移除特定元素、去重等。

範例解析：
- 輸入：nums = [3, 2, 2, 3], val = 3
- 過程：
  - 快指針 i 遍歷數組，慢指針 k 指向新數組的最後一個元素。
  - i=0: nums[0] = 3，等於 val，不處理。
  - i=1: nums[1] = 2，不等於 val，複製到 nums[0]，k=1。
  - i=2: nums[2] = 2，不等於 val，複製到 nums[1]，k=2。
  - i=3: nums[3] = 3，等於 val，不處理。
  - 返回 k=2，新數組為 [2, 2]。
- 輸出：2

函式功能說明：
- `class Solution`：封裝解決方案的類。
- `removeElement(nums, val)`：移除數組中所有等於 val 的元素，並返回新數組的長度。
- `k`：慢指針，用於指向新數組的最後一個元素。
- `i`：快指針，用於遍歷數組。
- `nums[k] = nums[i]`：將不等於 val 的元素複製到慢指針的位置。
- `k += 1`：慢指針向前移動。
'''